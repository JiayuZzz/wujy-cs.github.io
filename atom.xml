<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>the Blog</title>
  
  <subtitle>写字的地方</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-26T06:44:17.162Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Journii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Google File System</title>
    <link href="http://yoursite.com/2018/11/26/The-Google-File-System/"/>
    <id>http://yoursite.com/2018/11/26/The-Google-File-System/</id>
    <published>2018-11-26T06:34:21.000Z</published>
    <updated>2018-11-26T06:44:17.162Z</updated>
    
    <content type="html"><![CDATA[<p>本文为GFS的要点笔记。</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>本节为google设计GFS时做出的假设，或者说适合使用GFS的工作场景</p><ul><li>系统建立在许多廉价设备上，故障经常发生</li><li>系统中存在大量大文件。大文件需要被高效管理，小文件被支持但是不用专门优化</li><li>文件写入后很少被修改，即多数情况已写入的部分是只读的。因此主要优化顺序写，无需高效支持小的随机写。</li><li>读分为较大的连续读和较小的随机读。对于小的随机读，可以batch起来，而不是来回随机读</li><li>为多个client向同一个文件并发追加写操作提供良好支持，保证各client追加写操作的原子性，不用引入额外的锁</li><li>比起低延迟更重视高带宽</li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>本节为GFS的主要结构组成</p><p><img src="/assets/img/gfs/1.png"></p><p>GFS中存在Master，Chunk Server，Client三种节点，其中Master只存在一个。每一个节点都是一个运行在一台linux机器上的一个用户级进程。</p><p>Client向master请求元数据，与chunk server进行实际的数据传输。</p><h3 id="Chunk-Server"><a href="#Chunk-Server" class="headerlink" title="Chunk Server"></a>Chunk Server</h3><p>负责存储系统中的所有文件的数据，每个文件被分割成固定大小的chunks存储在若干个chunk server上，每个chunk</p><ul><li>拥有多个redundancy</li><li>在本地存储为一个linux文件</li><li>拥有一个61bit的唯一标识</li><li>size较大，paper中为64MB<ul><li>更少的元数据</li><li>更少的与master的交互</li><li>内部碎片 (bad)</li><li>Hotspots (bad)</li></ul></li></ul><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><p>系统中同时只存在一个master，拥有全局信息</p><h4 id="管理系统中所有的metadata"><a href="#管理系统中所有的metadata" class="headerlink" title="管理系统中所有的metadata"></a>管理系统中所有的metadata</h4><p>主要包括</p><ul><li>文件和chunk的namespace</li><li>文件到chunk的映射<ul><li>full pathname -&gt; metadata</li></ul></li><li>chunk副本的位置信息</li><li>存取控制信息</li></ul><p>metadata一直保存于内存中以保证性能。Master的内存限制了系统中的文件总量，每个chunk的metadata和每个文件的namespace信息一般不超过64byte。</p><h5 id="Persistency："><a href="#Persistency：" class="headerlink" title="Persistency："></a>Persistency：</h5><p>前两者通过operation log记录在本地disk和远程备份上，即在修改前先记录日志。日志信息在master启动时以及新的chunkserver加入时与chunkserver通信获取。</p><p>Operation log不仅用于metadata persistency，且作为逻辑时间线来定义并发操作序列，来唯一标识file和chunk version。修改操作只有在记录到本地和远程log后才回复客户端。</p><h4 id="Heartbeats"><a href="#Heartbeats" class="headerlink" title="Heartbeats"></a>Heartbeats</h4><p>使用heartbeats与chunk servers通信</p><ul><li>获取chunk位置</li><li>grant/revoke lease</li><li>探测错误/过时chunk</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>Master还管理chunk的lease（即为每个chunk group指定leader），chunk转移（负载均衡），re-replication（when server fail），GC（chunk 删除）</p><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>负责使用GFS提供的API存取数据</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>GFS的主要接口</p><ul><li>Create<ul><li>根据负载均衡选择chunkserver</li></ul></li><li>Delete<ul><li>不立即回收空间，而是在周期性的后台GC中收回，因此gc前可恢复被删除的文件</li></ul></li><li>Open</li><li>Close</li><li>Read</li><li>Write</li><li>Record Append<ul><li>保证多线程Append的无锁原子性</li></ul></li><li>Snapshot<ul><li>Copy of file or a directory tree</li></ul></li></ul><h2 id="系统交互"><a href="#系统交互" class="headerlink" title="系统交互"></a>系统交互</h2><h3 id="读"><a href="#读" class="headerlink" title="读"></a>读</h3><ul><li>client将文件offset翻译到chunk号，向master发送(filename, chunk index)请求元数据</li><li>master可一次向client回复后续多个chunk的位置以减少通信。</li><li>client利用位置信息向chunk server请求file data<ul><li>client不缓存file data, 仅缓存metadata以减少master负载。</li></ul></li></ul><h3 id="写"><a href="#写" class="headerlink" title="写"></a>写</h3><h4 id="Lease"><a href="#Lease" class="headerlink" title="Lease"></a>Lease</h4><p>master给某个replica颁发lease使其成为primary，primary负责使命令在所有replica上顺序执行</p><p>当lease过期（持续一个timeout），master将lease颁给其他replica。lease可续约。</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><img src="/assets/img/gfs/2.png"></p><p>要点</p><ul><li>数据流和控制流分离。client先把数据传输给所有replicas，然后向primary发起写请求<ul><li>数据流在chunkserver以管道形式链式传播，如client-&gt;s1-&gt;s2-&gt;s3，各自发送到最近的目标，从开始接收数据开始便可开始转发，以利用网络带宽</li></ul></li><li>数据接收完毕后通知客户端，客户端向primary发起写请求。primary为并发写请求指定sequence number以确定执行顺序。</li><li>primary应用到本地后将写请求及sequence number转发给secondary，待所有secondary完成后回复客户端，在任一replica失败则认为操作失败</li></ul><h3 id="Append"><a href="#Append" class="headerlink" title="Append"></a>Append</h3><ul><li>保证并发Append at least once</li><li>将并发请求类似生产-消费者模式归并成串行</li><li>由Primary决定offset，因此最后写入的位置不一定是客户端所认为的文件结束位置</li><li>即使某次中途写失败，由于下次还是由Primary决定位置，因此最终肯定在各chunk都写在相同位置上<ul><li>只是中间会穿插不正确区域，由客户端自己解决</li></ul></li><li>若chunk空间不足，则primary及secondary填满padding，并通知client重试下一个chunk<ul><li>限制每次最大append大小以减少空间浪费</li></ul></li></ul><h3 id="Snapshot"><a href="#Snapshot" class="headerlink" title="Snapshot"></a>Snapshot</h3><p>使用 copy-on-write</p><ul><li>master为新文件复制原文件相同的metadata</li><li>新文件指向原文件相同块<ul><li>给这些块一个reference number表示存在快照</li></ul></li><li>当写这些块时才copy，返回新copy的块给客户端<ul><li>对客户端透明，客户端以为还在写之前的块</li></ul></li></ul><h2 id="一致性模型"><a href="#一致性模型" class="headerlink" title="一致性模型"></a>一致性模型</h2><p>使用较为放松的一致性模型</p><h3 id="metadata一致性"><a href="#metadata一致性" class="headerlink" title="metadata一致性"></a>metadata一致性</h3><ul><li>Master通过锁保证namespace修改的原子性<ul><li>例如写a/b/c需要对a和a/b的读锁和对a/b/c的写锁</li></ul></li></ul><h3 id="文件操作一致性"><a href="#文件操作一致性" class="headerlink" title="文件操作一致性"></a>文件操作一致性</h3><p><img src="/assets/img/gfs/3.png"></p><p>consistent：客户端读到的内容一致（但不一定正确）</p><p>defined：客户端能看到每次修改的结果（因此consistent）</p><ul><li>并发写：若多个客户端并发写某些互相覆盖的区域，则会导致undefined，但是consistent</li><li>master通过与chunkserver周期性handshake，使用checksum来探测数据损坏，并立刻从valid server恢复数据</li><li>应用为了更好地适应该一致性模型，可以：<ul><li>尽量使用append而非overwrite</li><li>写文件时时使用带校验和的checkpoint，读时读到checkpoint时检查</li><li>自我校验等</li></ul></li></ul><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><ul><li>master周期性地扫描namespace</li><li>delete文件为重命名将其隐藏，经过一段时间后，在周期性扫描中master删除其metadata。在此之前可恢复</li><li>利用版本号可发现错过改动的过期chunks</li><li>chunkserver通过HeartBeat告诉master自己持有的chunks，master回复chunkserver不存在metadata中或过期的chunks，chunkserver将其删除</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文为GFS的要点笔记。&lt;/p&gt;
&lt;h2 id=&quot;设计&quot;&gt;&lt;a href=&quot;#设计&quot; class=&quot;headerlink&quot; title=&quot;设计&quot;&gt;&lt;/a&gt;设计&lt;/h2&gt;&lt;p&gt;本节为google设计GFS时做出的假设，或者说适合使用GFS的工作场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="notes" scheme="http://yoursite.com/tags/notes/"/>
    
  </entry>
  
</feed>
